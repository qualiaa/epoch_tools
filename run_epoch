#!/bin/bash

readonly PROGNAME="$(basename $0)"
readonly USAGE="Usage: $PROGNAME [-d] -n nodes -p ppn -m mem -t walltime -- root_dir"

# constants set by minerva
readonly MAX_PPN=12
readonly MAX_NODES=48 # 576/12
readonly MAX_MEM=2012
readonly MAX_WALLTIME="48:00:00"

readonly DEV_PPN=12
readonly DEV_NODES=4 # 48/12
readonly DEV_MEM=2012
readonly DEV_WALLTIME="01:00:00"

# constants given as options
# TODO: enforce limits based on devel/normal queues
NODES=
PPN=
MEM=2012 # TODO: default for MEM, limit to 2012
WALLTIME=
RUN=false
DEVEL=false
ARRAY=false
N_ARRAY=

command=cat
sub_flags="-A midpluswarwick $sub_flags"
pbs_flags='#PBS'


err () {
    echo -e "$PROGNAME: $@""\nTry -h for usage." >&2; exit 1
}

# process command line flags
while getopts ":hrda:n:p:m:t:" flag; do
    case "$flag" in
        a) ARRAY=true; N_ARRAY="$OPTARG" ;;
        n) NODES="$OPTARG" ;;
        p) PPN="$OPTARG" ;;
        m) MEM="$OPTARG" ;;
        t) WALLTIME="$OPTARG" ;;
        d) DEVEL=true; sub_flags="$sub_flags -q midplusdevel" ;;
        r) RUN=true ;;
        h) echo $USAGE; exit ;;
        :) err "Option -$OPTARG requires argument" ;;
        \?) echo "Unrecognized option -$OPTARG" >&2 ;;
        *) err "Unexpected optargs output" ;;
    esac
done
readonly NODES PPN MEM WALLTIME ARRAY N_ARRAY DEVEL RUN

# quit if mandatory constants not given
if [[ -z "$NODES" || -z "$PPN" || -z "$MEM" || -z "$WALLTIME" ]]; then
    err "Required flags not set."
fi

# first argument after flags is code root directory
shift $((${OPTIND} - 1))

# check necessary directory layout
readonly ROOT_DIR="${1/%\//}"
readonly EPOCH_DIR="$ROOT_DIR"/epoch3d
readonly DATA_DIR="$EPOCH_DIR"/Data
readonly EPOCH="$EPOCH_DIR"/bin/epoch3d

if [ -z "$ROOT_DIR" ]; then
    err "root_dir not given"
elif [ ! -f "$EPOCH" ]; then
    err "could not find file $EPOCH"
elif [ ! -x "$EPOCH" ]; then
    err "file $EPOCH not executable"
fi

# TODO: add support for different input decks

n_proc=$(($NODES * $PPN))
output_dir="$HOME/output/$(basename ${ROOT_DIR})"
output_dir="${output_dir}_${n_proc}proc"
[[ $DEVEL == true ]] && output_dir="${output_dir}_devel"
output_dir="$(mkuniqdir $output_dir)" # append a unique number

if [[ $ARRAY == true ]]; then
    pbs_flags="$pbs_flags -t 1-${N_ARRAY}:1"
fi

if [[ $RUN == true ]]; then
    command="msub $sub_flags"
else
    command="cat"
    rmdir $output_dir
    echo "sub_flags: $sub_flags"
    echo "output_dir: $output_dir"
    echo "========================"
    echo "begin submission script:"
    echo "========================"
fi

${command} <<MSUB_SUBMISSION_SCRIPT---------------------------------------
#!/bin/bash
#PBS -l nodes=${NODES}:ppn=${PPN},pvmem=${MEM}mb,walltime=${WALLTIME}
$pbs_flags

module load ompi/1.6.4/intel/12.1

cd \$PBS_O_WORKDIR

output_dir="$output_dir"

if [[ $ARRAY == true ]]; then
    output_dir="\${output_dir}/\${MOAB_JOBARRAYINDEX}"
    mkdir "\$output_dir"
fi

cp "$DATA_DIR"/input.deck "\$output_dir"
mpirun $EPOCH <<<"\$output_dir"
gprof $EPOCH > "\$output_dir"/profile.out
rm gmon.out

MSUB_SUBMISSION_SCRIPT---------------------------------------
